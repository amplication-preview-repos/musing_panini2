/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Paciente as PrismaPaciente,
  Turno as PrismaTurno,
  EstudioMedico as PrismaEstudioMedico,
} from "@prisma/client";

export class PacienteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PacienteCountArgs, "select">): Promise<number> {
    return this.prisma.paciente.count(args);
  }

  async pacientes(
    args: Prisma.PacienteFindManyArgs
  ): Promise<PrismaPaciente[]> {
    return this.prisma.paciente.findMany(args);
  }
  async paciente(
    args: Prisma.PacienteFindUniqueArgs
  ): Promise<PrismaPaciente | null> {
    return this.prisma.paciente.findUnique(args);
  }
  async createPaciente(
    args: Prisma.PacienteCreateArgs
  ): Promise<PrismaPaciente> {
    return this.prisma.paciente.create(args);
  }
  async updatePaciente(
    args: Prisma.PacienteUpdateArgs
  ): Promise<PrismaPaciente> {
    return this.prisma.paciente.update(args);
  }
  async deletePaciente(
    args: Prisma.PacienteDeleteArgs
  ): Promise<PrismaPaciente> {
    return this.prisma.paciente.delete(args);
  }

  async findTurnos(
    parentId: string,
    args: Prisma.TurnoFindManyArgs
  ): Promise<PrismaTurno[]> {
    return this.prisma.paciente
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .turnos(args);
  }

  async findEstudioMedicos(
    parentId: string,
    args: Prisma.EstudioMedicoFindManyArgs
  ): Promise<PrismaEstudioMedico[]> {
    return this.prisma.paciente
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .estudioMedicos(args);
  }
}
