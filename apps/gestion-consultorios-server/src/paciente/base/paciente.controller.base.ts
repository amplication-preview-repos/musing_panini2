/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PacienteService } from "../paciente.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PacienteCreateInput } from "./PacienteCreateInput";
import { Paciente } from "./Paciente";
import { PacienteFindManyArgs } from "./PacienteFindManyArgs";
import { PacienteWhereUniqueInput } from "./PacienteWhereUniqueInput";
import { PacienteUpdateInput } from "./PacienteUpdateInput";
import { TurnoFindManyArgs } from "../../turno/base/TurnoFindManyArgs";
import { Turno } from "../../turno/base/Turno";
import { TurnoWhereUniqueInput } from "../../turno/base/TurnoWhereUniqueInput";
import { EstudioMedicoFindManyArgs } from "../../estudioMedico/base/EstudioMedicoFindManyArgs";
import { EstudioMedico } from "../../estudioMedico/base/EstudioMedico";
import { EstudioMedicoWhereUniqueInput } from "../../estudioMedico/base/EstudioMedicoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PacienteControllerBase {
  constructor(
    protected readonly service: PacienteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Paciente })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPaciente(
    @common.Body() data: PacienteCreateInput
  ): Promise<Paciente> {
    return await this.service.createPaciente({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        apellido: true,
        fechaNacimiento: true,
        dni: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Paciente] })
  @ApiNestedQuery(PacienteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async pacientes(@common.Req() request: Request): Promise<Paciente[]> {
    const args = plainToClass(PacienteFindManyArgs, request.query);
    return this.service.pacientes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        apellido: true,
        fechaNacimiento: true,
        dni: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Paciente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paciente(
    @common.Param() params: PacienteWhereUniqueInput
  ): Promise<Paciente | null> {
    const result = await this.service.paciente({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        apellido: true,
        fechaNacimiento: true,
        dni: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Paciente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePaciente(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() data: PacienteUpdateInput
  ): Promise<Paciente | null> {
    try {
      return await this.service.updatePaciente({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nombre: true,
          apellido: true,
          fechaNacimiento: true,
          dni: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Paciente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePaciente(
    @common.Param() params: PacienteWhereUniqueInput
  ): Promise<Paciente | null> {
    try {
      return await this.service.deletePaciente({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nombre: true,
          apellido: true,
          fechaNacimiento: true,
          dni: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/turnos")
  @ApiNestedQuery(TurnoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "read",
    possession: "any",
  })
  async findTurnos(
    @common.Req() request: Request,
    @common.Param() params: PacienteWhereUniqueInput
  ): Promise<Turno[]> {
    const query = plainToClass(TurnoFindManyArgs, request.query);
    const results = await this.service.findTurnos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fechaHora: true,

        paciente: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/turnos")
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async connectTurnos(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() body: TurnoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      turnos: {
        connect: body,
      },
    };
    await this.service.updatePaciente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/turnos")
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async updateTurnos(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() body: TurnoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      turnos: {
        set: body,
      },
    };
    await this.service.updatePaciente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/turnos")
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async disconnectTurnos(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() body: TurnoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      turnos: {
        disconnect: body,
      },
    };
    await this.service.updatePaciente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/estudioMedicos")
  @ApiNestedQuery(EstudioMedicoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "read",
    possession: "any",
  })
  async findEstudioMedicos(
    @common.Req() request: Request,
    @common.Param() params: PacienteWhereUniqueInput
  ): Promise<EstudioMedico[]> {
    const query = plainToClass(EstudioMedicoFindManyArgs, request.query);
    const results = await this.service.findEstudioMedicos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tipo: true,
        fecha: true,
        resultado: true,

        paciente: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/estudioMedicos")
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async connectEstudioMedicos(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() body: EstudioMedicoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estudioMedicos: {
        connect: body,
      },
    };
    await this.service.updatePaciente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/estudioMedicos")
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async updateEstudioMedicos(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() body: EstudioMedicoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estudioMedicos: {
        set: body,
      },
    };
    await this.service.updatePaciente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/estudioMedicos")
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async disconnectEstudioMedicos(
    @common.Param() params: PacienteWhereUniqueInput,
    @common.Body() body: EstudioMedicoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estudioMedicos: {
        disconnect: body,
      },
    };
    await this.service.updatePaciente({
      where: params,
      data,
      select: { id: true },
    });
  }
}
