/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EstudioMedico as PrismaEstudioMedico,
  Paciente as PrismaPaciente,
} from "@prisma/client";

export class EstudioMedicoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EstudioMedicoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.estudioMedico.count(args);
  }

  async estudioMedicos(
    args: Prisma.EstudioMedicoFindManyArgs
  ): Promise<PrismaEstudioMedico[]> {
    return this.prisma.estudioMedico.findMany(args);
  }
  async estudioMedico(
    args: Prisma.EstudioMedicoFindUniqueArgs
  ): Promise<PrismaEstudioMedico | null> {
    return this.prisma.estudioMedico.findUnique(args);
  }
  async createEstudioMedico(
    args: Prisma.EstudioMedicoCreateArgs
  ): Promise<PrismaEstudioMedico> {
    return this.prisma.estudioMedico.create(args);
  }
  async updateEstudioMedico(
    args: Prisma.EstudioMedicoUpdateArgs
  ): Promise<PrismaEstudioMedico> {
    return this.prisma.estudioMedico.update(args);
  }
  async deleteEstudioMedico(
    args: Prisma.EstudioMedicoDeleteArgs
  ): Promise<PrismaEstudioMedico> {
    return this.prisma.estudioMedico.delete(args);
  }

  async getPaciente(parentId: string): Promise<PrismaPaciente | null> {
    return this.prisma.estudioMedico
      .findUnique({
        where: { id: parentId },
      })
      .paciente();
  }
}
