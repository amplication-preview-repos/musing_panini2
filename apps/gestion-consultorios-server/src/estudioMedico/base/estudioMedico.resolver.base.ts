/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EstudioMedico } from "./EstudioMedico";
import { EstudioMedicoCountArgs } from "./EstudioMedicoCountArgs";
import { EstudioMedicoFindManyArgs } from "./EstudioMedicoFindManyArgs";
import { EstudioMedicoFindUniqueArgs } from "./EstudioMedicoFindUniqueArgs";
import { CreateEstudioMedicoArgs } from "./CreateEstudioMedicoArgs";
import { UpdateEstudioMedicoArgs } from "./UpdateEstudioMedicoArgs";
import { DeleteEstudioMedicoArgs } from "./DeleteEstudioMedicoArgs";
import { Paciente } from "../../paciente/base/Paciente";
import { EstudioMedicoService } from "../estudioMedico.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EstudioMedico)
export class EstudioMedicoResolverBase {
  constructor(
    protected readonly service: EstudioMedicoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "read",
    possession: "any",
  })
  async _estudioMedicosMeta(
    @graphql.Args() args: EstudioMedicoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EstudioMedico])
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "read",
    possession: "any",
  })
  async estudioMedicos(
    @graphql.Args() args: EstudioMedicoFindManyArgs
  ): Promise<EstudioMedico[]> {
    return this.service.estudioMedicos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EstudioMedico, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "read",
    possession: "own",
  })
  async estudioMedico(
    @graphql.Args() args: EstudioMedicoFindUniqueArgs
  ): Promise<EstudioMedico | null> {
    const result = await this.service.estudioMedico(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EstudioMedico)
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "create",
    possession: "any",
  })
  async createEstudioMedico(
    @graphql.Args() args: CreateEstudioMedicoArgs
  ): Promise<EstudioMedico> {
    return await this.service.createEstudioMedico({
      ...args,
      data: {
        ...args.data,

        paciente: args.data.paciente
          ? {
              connect: args.data.paciente,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EstudioMedico)
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "update",
    possession: "any",
  })
  async updateEstudioMedico(
    @graphql.Args() args: UpdateEstudioMedicoArgs
  ): Promise<EstudioMedico | null> {
    try {
      return await this.service.updateEstudioMedico({
        ...args,
        data: {
          ...args.data,

          paciente: args.data.paciente
            ? {
                connect: args.data.paciente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EstudioMedico)
  @nestAccessControl.UseRoles({
    resource: "EstudioMedico",
    action: "delete",
    possession: "any",
  })
  async deleteEstudioMedico(
    @graphql.Args() args: DeleteEstudioMedicoArgs
  ): Promise<EstudioMedico | null> {
    try {
      return await this.service.deleteEstudioMedico(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Paciente, {
    nullable: true,
    name: "paciente",
  })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "any",
  })
  async getPaciente(
    @graphql.Parent() parent: EstudioMedico
  ): Promise<Paciente | null> {
    const result = await this.service.getPaciente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
