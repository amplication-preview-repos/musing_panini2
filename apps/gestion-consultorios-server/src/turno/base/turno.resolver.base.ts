/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Turno } from "./Turno";
import { TurnoCountArgs } from "./TurnoCountArgs";
import { TurnoFindManyArgs } from "./TurnoFindManyArgs";
import { TurnoFindUniqueArgs } from "./TurnoFindUniqueArgs";
import { CreateTurnoArgs } from "./CreateTurnoArgs";
import { UpdateTurnoArgs } from "./UpdateTurnoArgs";
import { DeleteTurnoArgs } from "./DeleteTurnoArgs";
import { Paciente } from "../../paciente/base/Paciente";
import { TurnoService } from "../turno.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Turno)
export class TurnoResolverBase {
  constructor(
    protected readonly service: TurnoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "read",
    possession: "any",
  })
  async _turnosMeta(
    @graphql.Args() args: TurnoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Turno])
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "read",
    possession: "any",
  })
  async turnos(@graphql.Args() args: TurnoFindManyArgs): Promise<Turno[]> {
    return this.service.turnos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Turno, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "read",
    possession: "own",
  })
  async turno(
    @graphql.Args() args: TurnoFindUniqueArgs
  ): Promise<Turno | null> {
    const result = await this.service.turno(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Turno)
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "create",
    possession: "any",
  })
  async createTurno(@graphql.Args() args: CreateTurnoArgs): Promise<Turno> {
    return await this.service.createTurno({
      ...args,
      data: {
        ...args.data,

        paciente: args.data.paciente
          ? {
              connect: args.data.paciente,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Turno)
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "update",
    possession: "any",
  })
  async updateTurno(
    @graphql.Args() args: UpdateTurnoArgs
  ): Promise<Turno | null> {
    try {
      return await this.service.updateTurno({
        ...args,
        data: {
          ...args.data,

          paciente: args.data.paciente
            ? {
                connect: args.data.paciente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Turno)
  @nestAccessControl.UseRoles({
    resource: "Turno",
    action: "delete",
    possession: "any",
  })
  async deleteTurno(
    @graphql.Args() args: DeleteTurnoArgs
  ): Promise<Turno | null> {
    try {
      return await this.service.deleteTurno(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Paciente, {
    nullable: true,
    name: "paciente",
  })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "any",
  })
  async getPaciente(@graphql.Parent() parent: Turno): Promise<Paciente | null> {
    const result = await this.service.getPaciente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
