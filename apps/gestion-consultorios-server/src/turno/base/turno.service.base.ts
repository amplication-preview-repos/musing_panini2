/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Turno as PrismaTurno,
  Paciente as PrismaPaciente,
} from "@prisma/client";

export class TurnoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TurnoCountArgs, "select">): Promise<number> {
    return this.prisma.turno.count(args);
  }

  async turnos(args: Prisma.TurnoFindManyArgs): Promise<PrismaTurno[]> {
    return this.prisma.turno.findMany(args);
  }
  async turno(args: Prisma.TurnoFindUniqueArgs): Promise<PrismaTurno | null> {
    return this.prisma.turno.findUnique(args);
  }
  async createTurno(args: Prisma.TurnoCreateArgs): Promise<PrismaTurno> {
    return this.prisma.turno.create(args);
  }
  async updateTurno(args: Prisma.TurnoUpdateArgs): Promise<PrismaTurno> {
    return this.prisma.turno.update(args);
  }
  async deleteTurno(args: Prisma.TurnoDeleteArgs): Promise<PrismaTurno> {
    return this.prisma.turno.delete(args);
  }

  async getPaciente(parentId: string): Promise<PrismaPaciente | null> {
    return this.prisma.turno
      .findUnique({
        where: { id: parentId },
      })
      .paciente();
  }
}
